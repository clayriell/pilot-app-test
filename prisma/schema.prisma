generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id       Int              @id @default(autoincrement())
  name     String
  users    User[]
  services PilotageService[]
  tugs     AssistTug[]
}

model User {
  id        Int              @id @default(autoincrement())
  username  String?           @unique
  name      String
  email     String           @unique
  password  String  @db.VarChar(255)
  role      String?
  picture   String?
  companyId Int?
  company   Company?         @relation(fields: [companyId], references: [id])

  // relation ke pilotageService (submitter & creator)
  submittedServices PilotageService[] @relation("submittedBy")
  createdServices   PilotageService[] @relation("createdBy")
}

model PilotageService {
  id             Int           @id @default(autoincrement())
  docNumber      String?
  idJasa         Int?        // data eksternal
  agencyId       Int?          // mungkin perlu tabel Agency nanti?
  companyId      Int?
  company        Company?      @relation(fields: [companyId], references: [id])
  activity       String?
  terminalStartId Int?
  terminalEndId   Int?
  terminalStart   Terminal?    @relation("StartTerminal", fields: [terminalStartId], references: [id])
  terminalEnd     Terminal?    @relation("EndTerminal", fields: [terminalEndId], references: [id])
  lastPort       String?
  nextPort       String?
  pilotId        Int?
  startDate      DateTime @db.Date @default(dbgenerated("CURRENT_DATE"))
  startTime      DateTime @db.Time @default(dbgenerated("CURRENT_TIME"))
  endDate        DateTime? @db.Date
  endTime        DateTime? @db.Time
  note           String?
  status         String
  amount         Decimal       @db.Decimal(10,2)
  rate           Int           @default(5)
  submitTime     DateTime?
  submittedBy    Int?
  submittedUser  User?         @relation("submittedBy", fields: [submittedBy], references: [id])
  createdBy      Int?
  creator        User?         @relation("createdBy", fields: [createdBy], references: [id])

  shipDetails    ShipDetail[]
  tugServices    TugService[]
}

model ShipDetail {
  id                Int              @id @default(autoincrement())
  pilotageServiceId Int
  pilotageService   PilotageService  @relation(fields: [pilotageServiceId], references: [id])
  shipName          String
  master            String
  grt               Int?
  loa               Int?
  flag              String?
}

model AssistTug {
  id        Int       @id @default(autoincrement())
  shipName  String
  master    String
  horsePower Int
  companyId Int?
  company   Company?  @relation(fields: [companyId], references: [id])

  tugDetails TugServiceDetail[]
}

model TugService {
  id                Int              @id @default(autoincrement())
  pilotageServiceId Int
  pilotageService   PilotageService  @relation(fields: [pilotageServiceId], references: [id])
  idJasa            Int?           // eksternal
  amount            Decimal          @db.Decimal(10,2)

  tugDetails        TugServiceDetail[]
}

model TugServiceDetail {
  id          Int        @id @default(autoincrement())
  tugServiceId Int
  tugService   TugService @relation(fields: [tugServiceId], references: [id])
  assistTugId Int
  assistTug   AssistTug  @relation(fields: [assistTugId], references: [id])
  connectTime DateTime
  disconnectTime DateTime
}

model Terminal {
  id     Int     @id @default(autoincrement())
  code   String  @unique
  name   String
  area   String?

  pilotageServicesStart PilotageService[] @relation("StartTerminal")
  pilotageServicesEnd   PilotageService[] @relation("EndTerminal")
}
